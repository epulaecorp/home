blueprint:
  name: LIGHT - Motion & illuminance.
  description: >
    Enciende una luz, interruptor, escena, script o grupo basado en la detección de movimiento, y bajo nivel de luz.

    Este plano utiliza entidades de ayuda que tienes que crear ti mismo para algunos valores de entrada, para poder establecer límites dinámicamente. 
    Para obtener instrucciones sobre la creación de las entidades de ayuda, echa un vistazo al tema del foro de la Comunidad de Home Assistant:
    https://community.home-assistant.io/t/turn-on-light-switch-scene-or-script-based-on-motion-and-illuminance-more-conditions/257085


    - Entidad de bloqueo (cualquier entidad con estado on/off)

    - Límite de tiempo antes (input_datetime)

    - Tiempo límite después (input_datetime)

    - Desactivar tiempo de espera (input_number definiendo cantidad en minutos)

    - Desactivar entidad (cualquier entity_id que necesite ser desactivada después de la espera)


  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      description: Este sensor activará el encendido de la entidad objetivo.
      selector:
        entity:
    target_entity:
      name: Target entity.
      description: La luz, el interruptor o la escena que se encenderá (o la secuencia de comandos que se ejecutará) cuando se active la automatización..
      selector:
        entity:
    illuminance_sensor:
      name: (OPTIONAL) Illuminance sensor
      description: Este sensor se utilizará para determinar la iluminación.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_cutoff:
      name: (OPTIONAL) Illuminance cutoff value
      description: Este valor se utilizará para comparar con la iluminación actual para determinar si es baja.
      default:
      selector:
        entity:
          domain: input_number
    blocker_entity:
      name: (OPTIONAL) Blocking entity
      description: Si se activa, impedirá que se ejecute la automatización. Por ejemplo, modo de suspensión o modo ausente..
      default:
      selector:
        entity:
    time_limit_after:
      name: (OPTIONAL) Only run after time.
      description: La automatización sólo se ejecutará cuando la hora sea posterior a esta hora.
      default:
      selector:
        entity:
          domain: input_datetime
    time_limit_before:
      name: (OPTIONAL) Only run before time.
      description: La automatización sólo se ejecutará cuando la hora sea anterior a esta hora.
      default:
      selector:
        entity:
          domain: input_datetime
    no_motion_wait:
      name: (OPTIONAL) Turn off wait time (minutes)
      description: Tiempo en minutos para dejar la entidad objetivo encendida después de detectar el último movimiento. Si no se utiliza, la entidad no se apagará automáticamente.
      default:
      selector:
        entity:
          domain: input_number
    turn_off_blocker_entity:
      name: (OPTIONAL) Turn-off Blocking entity
      description: Si el estado de esta entidad es activado, impedirá que la entidad de destino se apague tras el retardo establecido.
      default:
      selector:
        entity:
    target_off_entity:
      name: (OPTIONAL) Turn-off entity
      description: Si se define, esta entidad se desactivará en lugar de la entidad objetivo por defecto. Esto puede ser útil cuando se utilizan entidades de destino de tipo escena o script.
      default:
      selector:
        entity:
    sunstate_condition:
      name: Sun-state condition
      description: Cuándo activar la automatización, en función de la elevación del sol. Utilice ALWAYS cuando no desee añadir una condición para ello..
      default: 'Always'
      selector:
        select:
          options:
            - Always
            - Below horizon
            - Above horizon

mode: restart
max_exceeded: silent

variables:
  target_entity: !input target_entity
  illuminance_currently: !input illuminance_sensor
  illuminance_cutoff: !input illuminance_cutoff
  blocker_entity: !input blocker_entity
  time_limit_before: !input time_limit_before
  time_limit_after: !input time_limit_after
  no_motion_wait: !input no_motion_wait
  entity_domain: "{{ states[target_entity].domain }}"
  turn_off_blocker_entity: !input turn_off_blocker_entity
  target_off_entity: !input target_off_entity
  sun_condition: !input sunstate_condition

trigger:
  platform: state
  entity_id: !input motion_sensor
  to: 'on'

condition:

# When entity was already on because the automation ran recently, do not check illuminance because it could have increased above threshold because of a light that was just turned on.
# This check is not possible for script target_entities or fir scene target_entities that control more than 1 entity.
# This might cause the automation to turn off the target entity too soon because the illuminance check fails on restart of the automation.
  - condition: template
    alias: 'Check for illuminance conditions'
    value_template: >
      {% set illuminance_defined = illuminance_currently != none and illuminance_cutoff != none  %}
      {% set illuminance_defined_and_low = (illuminance_defined and (states(illuminance_currently) | int(0) < states(illuminance_cutoff) | int(0)))  %}
 
      {% set target_entity_domain_supports_on_state_check = entity_domain != 'scene' and entity_domain != 'script' %}
      {% set target_entity_is_scene = entity_domain == 'scene' %}
      {% set scene_target_entities = state_attr(target_entity, 'entity_id') %}
      {% set singular_scene_entity_is_on = scene_target_entities is not none and scene_target_entities | count == 1 and scene_target_entities | first == 'on' %}
      {{ 
      ( target_entity_domain_supports_on_state_check and states(target_entity) == 'on') or
      ( target_entity_domain_supports_on_state_check and states(target_entity) == 'off' and not illuminance_defined) or
      ( target_entity_domain_supports_on_state_check and states(target_entity) == 'off' and illuminance_defined_and_low) or
      ( not target_entity_domain_supports_on_state_check and illuminance_defined_and_low) or
      ( not target_entity_domain_supports_on_state_check and not illuminance_defined) or
      ( target_entity_is_scene and singular_scene_entity_is_on)
      }}

  - condition: template
    alias: 'Check for blocker entity'
    value_template: "{{ (blocker_entity == none) or (states(blocker_entity) == 'off') }}"

  - condition: template
    alias: 'Check for time limits'
    value_template: >
      {% set current_time = now().strftime("%H:%M")  %}

      {% if time_limit_before == none and time_limit_after == none %}
      true
      {% endif %}

      {% if time_limit_before != none and time_limit_after == none %}
      {% set current_time_is_before_limit = current_time < states(time_limit_before)  %}
      {{ current_time_is_before_limit }}
      {% elif time_limit_before == none and time_limit_after != none %}
      {% set current_time_is_after_limit = current_time > states(time_limit_after)  %}
      {{ current_time_is_after_limit }}
      {% endif %}

      {% if time_limit_before != none and time_limit_after != none %}
      {% set before_limit_is_tomorrow = states(time_limit_before) < states(time_limit_after)  %}
      {% set current_time_is_before_limit = current_time < states(time_limit_before)  %}
      {% set current_time_is_after_limit = current_time > states(time_limit_after)  %}
      {% set time_window_spans_midnight = states(time_limit_after) > states(time_limit_before)  %}
        {% if time_window_spans_midnight != none and time_window_spans_midnight and before_limit_is_tomorrow %}
        {{ current_time_is_after_limit or current_time_is_before_limit }}
        {% elif time_window_spans_midnight != none and not time_window_spans_midnight %}
        {{ current_time_is_before_limit and current_time_is_after_limit }}
        {% endif %}
      {% endif %}

  - condition: template
    alias: 'Check for sun state'
    value_template: >
      {# Prevent breaking when no sun condition is set in existing automations #}
      {% if not sun_condition is defined %}
      {% set sun_condition = 'Always'   %}
      {% endif %}
      {# Get current sun state #}
      {% set current_sun_condition = states['sun.sun'].state  %}
      
      {# Checks for current sun state #}
      {% set sun_state_is_below_horizon = current_sun_condition == 'below_horizon' %}
      {% set sun_state_is_above_horizon = current_sun_condition == 'above_horizon' %}
      
      {# Check to see if a condition for sunstate is set by user #}
      {% set no_sun_condition = sun_condition is defined and sun_condition == 'Always' %}
      {# Check to see if the user wants automation to trigger below horizon #}
      {% set sun_condition_is_below_horizon = sun_condition == 'Below horizon' %}
      {# Check to see if the user wants automation to trigger above horizon #}
      {% set sun_condition_is_above_horizon = sun_condition == 'Above horizon' %}
      
      {# Checks to see if sunstate matches up with users condition #}
      {% set sun_condition_below_horizon_match = sun_state_is_below_horizon and sun_condition_is_below_horizon %}
      {% set sun_condition_above_horizon_match = sun_state_is_above_horizon and sun_condition_is_above_horizon %}
      {% set sun_condition_matching = sun_condition_below_horizon_match or sun_condition_above_horizon_match or no_sun_condition %}
      {{ sun_condition_matching }}
      
      {# Debug values: (uncomment to check in template dev tool)
      ## Set at top of template: {% set sun_condition = 'Above horizon'  %}
      Current sun condition: {{current_sun_condition}}
      Sun state is below horizon: {{ sun_state_is_below_horizon }}
      Sun state is above horizon: {{ sun_state_is_above_horizon }}
      Sun condition is set to always: {{ sun_condition_always }}
      Sun condition is below horizon: {{ sun_condition_is_below_horizon }}
      Sun condition is above horizon: {{ sun_condition_is_above_horizon }}
      Sun condition is below horizon match: {{ sun_condition_below_horizon_match }}
      Sun condition is above horizon match: {{ sun_condition_above_horizon_match }}
      Sun condition is a match: {{ sun_condition_matching }}
      #}
      
action:
  - service: homeassistant.turn_on
    entity_id: !input target_entity
  - wait_for_trigger:
      platform: state
      entity_id: !input motion_sensor
      from: "on"
      to: "off"
  - choose:
    - alias: 'Motion wait not defined and target off entity not defined'    
      conditions:
        - condition: template
          value_template: "{{ no_motion_wait == none and target_off_entity == none }}"
      sequence:
        - service: homeassistant.turn_off
          entity_id: !input target_entity
    - alias: 'Motion wait not defined and target off entity defined'    
      conditions:
        - condition: template
          value_template: "{{ no_motion_wait == none and target_off_entity != none }}"
      sequence:
        - service: homeassistant.turn_off
          entity_id: !input target_off_entity
    - alias: 'Motion wait defined and target off entity not defined'    
      conditions:
        - condition: template
          value_template: "{{ no_motion_wait != none and target_off_entity == none }}"
      sequence:
        - delay: 
            minutes: '{{ states(no_motion_wait) | int(0) }}'
        - alias: "Check if blocker entity is defined and on"
          condition: template
          value_template: "{{ (turn_off_blocker_entity == none) or (states(turn_off_blocker_entity) == 'off') }}"
        - service: homeassistant.turn_off
          entity_id: !input target_entity 
    - alias: 'Motion wait defined and target off entity defined'    
      conditions:
        - condition: template
          value_template: "{{ no_motion_wait != none and target_off_entity != none }}"
      sequence:
        - delay: 
            minutes: '{{ states(no_motion_wait) | int(0) }}'
        - alias: "Check if blocker entity is defined and on"
          condition: template
          value_template: "{{ (turn_off_blocker_entity == none) or (states(turn_off_blocker_entity) == 'off') }}"
        - service: homeassistant.turn_off
          entity_id: !input target_off_entity